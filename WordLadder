class Word{
    int level;
    String word;
    public Word(String word, int level){
        this.word = word;
        this.level = level;
    }
}

class WordLadder {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {

        if (beginWord.length() == 0 || endWord.length() == 0 || wordList == null) return 0;

        Queue<Word> q = new LinkedList<>();
        q.offer(new Word(beginWord,1));


        while(!q.isEmpty()){
            Word curr = q.poll();
            ListIterator<String> itr = wordList.listIterator();
            while(itr.hasNext()){
                String temp = itr.next();
                if (isAdjacent(curr.word,temp)){
                    itr.remove();
                    q.offer(new Word(temp,curr.level+1));
                    if (temp.equals(endWord)){
                        return curr.level+1;
                    }
                }
            }
        }

        return 0;
    }

    private boolean isAdjacent(String word,String temp){
        int count = 0;
        for (int i = 0; i < word.length(); i++){
            if (word.charAt(i)!= temp.charAt(i)){
                count++;
            }
            if (count > 1){
                return false;
            }
        }

        return true;
    }
}